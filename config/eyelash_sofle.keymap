#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    behaviors {
    };

    keymap {
        compatible = "zmk,keymap";

        layer0 {
            bindings = <
&kp GRAVE   &kp N1     &kp N2        &kp N3     &kp N4        &kp N5    &kp UP_ARROW     &kp N6         &kp N7  &kp N8     &kp N9   &kp N0            &kp MINUS
&kp TAB     &kp Q      &kp W         &kp E      &kp R         &kp T     &kp DOWN_ARROW   &kp Y          &kp U   &kp I      &kp O    &kp P             &kp BACKSPACE
&kp CAPS    &kp A      &kp S         &kp D      &kp F         &kp G     &kp LEFT_ARROW   &kp H          &kp J   &kp K      &kp L    &kp SEMI          &kp ENTER
&kp LSHFT   &kp Z      &kp X         &kp C      &kp V         &kp B     &kp RIGHT_ARROW  &kp N          &kp M   &kp COMMA  &kp DOT  &kp FSLH          &kp RIGHT_SHIFT
&kp C_MUTE  &kp LCTRL  &kp LEFT_GUI  &kp SPACE  &kp LEFT_ALT  &mo 2     &kp ENTER        &kp RIGHT_ALT  &kp B   &kp SPACE  &mo 1    &kp SINGLE_QUOTE
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOL_DN>;
            display-name = "LAYER0";
        };

        layer_1 {
            bindings = <
&kp ESC     &kp F1           &kp F2           &kp F3           &kp F4           &kp F5             &mmv MOVE_UP     &kp F6  &kp F7  &kp F8  &kp F9            &kp F10            &kp EQUAL
&trans      &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &trans           &trans             &mmv MOVE_DOWN   &trans  &trans  &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp DEL
&trans      &trans           &trans           &rgb_ug RGB_HUI  &rgb_ug RGB_SAD  &rgb_ug RGB_BRI    &mmv MOVE_LEFT   &trans  &trans  &trans  &trans            &trans             &kp BACKSLASH
&trans      &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD    &mmv MOVE_RIGHT  &trans  &trans  &trans  &trans            &trans             &trans
&kp C_MUTE  &trans           &trans           &trans           &trans           &trans             &mkp LCLK        &trans  &trans  &trans  &trans            &trans
            >;

            display-name = "layer1";
            sensor-bindings = <&inc_dec_kp C_AC_SCROLL_UP C_AC_SCROLL_DOWN>;
        };

        layer_2 {
            bindings = <
&kp TILDE         &kp F1  &kp F2  &kp F3  &kp F4  &kp F5    &kp PG_UP      &kp F6  &kp F7  &kp F8  &kp F9          &kp F10          &kp PLUS
&soft_off         &trans  &trans  &trans  &trans  &trans    &kp PAGE_DOWN  &trans  &trans  &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp INS
&trans            &trans  &trans  &trans  &trans  &trans    &kp HOME       &trans  &trans  &trans  &trans          &trans           &kp PIPE
&kp LEFT_CONTROL  &trans  &trans  &trans  &trans  &trans    &kp END        &trans  &trans  &trans  &trans          &trans           &trans
&bootloader       &trans  &trans  &trans  &trans  &trans    &mkp RCLK      &trans  &trans  &trans  &trans          &trans
            >;

            sensor-bindings = <&inc_dec_kp C_BRIGHTNESS_INC C_BRIGHTNESS_DEC>;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
